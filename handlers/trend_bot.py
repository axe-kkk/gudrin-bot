import asyncio
import random

from aiogram import Router, F
from aiogram.types import Message
from keyboards.need_coins import need
from keyboards.start_search import start_search
from keyboards.trending_topics import trending_topics_kb
from models.user import User
from database import async_session_maker
from sqlmodel import select
from aiogram.types import CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from parser import register_and_extract

router = Router()

class SearchState(StatesGroup):
    waiting_for_query = State()


@router.message(F.text == "üìä Trend Bot")
async def referral_info(message: Message):
        await message.answer(
        "<b>üîç –ì–æ—Ç–æ–≤ –∏—Å–∫–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã?</b>\n\n"
            "–í–≤–µ–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏ üî• –ø–æ–¥–±–æ—Ä–∫—É —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–∏–Ω—ã –∏ –∫—Ä–∞–¥–∏ —Ç–≤–æ—Ä–∏ –∫–∞–∫ —Ö—É–¥–æ–∂–Ω–∏–∫!</b>",
            parse_mode="HTML",
            reply_markup=start_search
        )


@router.callback_query(F.data == "search")
async def close_referral_message(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()

    async with async_session_maker() as session:
        user = await session.exec(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        me = user.first()

        if me.coins <= 0:
            await callback.message.answer(
                text="üòû –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ coins",
                parse_mode="HTML",
                reply_markup=need
            )
            return
        else:
            me.coins -= 1
            me.flag = True
            session.add(me)
            await session.commit()

    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏ —Ç–µ–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –≤–∏–¥–µ–æ:\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º –Ω–∏–∂–µ üëá",
        parse_mode="HTML",
        reply_markup=trending_topics_kb()
    )
    await state.set_state(SearchState.waiting_for_query)
    await callback.answer()


@router.callback_query(F.data == "search_d")
async def close_referral_message(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()

    async with async_session_maker() as session:
        user = await session.exec(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        me = user.first()

        if me.diamonds <=  0:
            await callback.message.answer(
                text="üòû –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üíé",
                parse_mode="HTML",
                reply_markup=need
            )
            return
        else:
            me.diamonds -= 1
            me.flag = False
            session.add(me)
            await session.commit()

    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏ —Ç–µ–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –≤–∏–¥–µ–æ:\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º –Ω–∏–∂–µ üëá",
        parse_mode="HTML",
        reply_markup=trending_topics_kb()
    )
    await state.set_state(SearchState.waiting_for_query)
    await callback.answer()


@router.callback_query(F.data.startswith("topic:"))
async def handle_topic_choice(callback: CallbackQuery, state: FSMContext):
    topic = callback.data.split(":", 1)[1]

    await callback.message.delete()
    await callback.message.answer(f"üîç –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: <b>{topic}</b>", parse_mode="HTML")

    await run_query(callback.message, topic, state)
    await callback.answer()


async def run_query(message: Message, query: str, state: FSMContext):
    query = query.strip()

    progress_msg = await message.answer("üîç –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É...")

    async def show_progress(msg: Message, steps=10):
        statuses = [
            "üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞...",
            "üì° –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ...",
            "üì° –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ...",
            "üì° –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ...",
            "üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...",
            "üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...",
            "üßÆ –†–∞—Å—á—ë—Ç ER –∏ CR...",
            "üßÆ –†–∞—Å—á—ë—Ç ER –∏ CR...",
            "üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...",
            "‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º..."
        ]
        try:
            for i in range(1, steps + 1):
                done = "üü¢" * i
                todo = "‚ö™Ô∏è" * (steps - i)
                percent = i * 10
                bar = f"{done}{todo} {percent}%"
                status = statuses[i - 1]
                await msg.edit_text(f"{status}\n\n{bar}")
                await asyncio.sleep(random.randint(1, 3))
        except asyncio.CancelledError:
            pass
        except Exception:
            pass

    animation_task = asyncio.create_task(show_progress(progress_msg))

    loop = asyncio.get_event_loop()
    results = await loop.run_in_executor(None, register_and_extract, query)

    animation_task.cancel()
    try:
        await animation_task
    except asyncio.CancelledError:
        pass

    if results:
        await progress_msg.edit_text("<b>–í–æ—Ç —á—Ç–æ –Ω–∞—à–µ–ª –¢—Ä–µ–Ω–¥ –ë–æ—Ç –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É:</b>", parse_mode="HTML")

        for res in results:
            try:
                await message.answer(
                    f"üé¨ <b>–í–∏–¥–µ–æ</b>\n\n"
                    f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {res['views']}\n"
                    f"‚ù§Ô∏è –õ–∞–π–∫–∏: {res['likes']}\n"
                    f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {res['comments']}\n"
                    f"üîÅ –†–µ–ø–æ—Å—Ç—ã: {res['reposts']}\n"
                    f"üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏: {res['saves']}\n"
                    f"üß† ER/View: {res['er']}\n"
                    f"üìà CR/View: {res['cr']}\n\n"
                    f"üìà –û—Ü–µ–Ω–∫–∞ –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏: {res['viral_score']}/10\n\n"
                    f"üìé <a href='https://www.instagram.com/reel/{res['short_id']}'>–°–º–æ—Ç—Ä–µ—Ç—å –≤ Instagram</a>",
                    parse_mode="HTML"
                )
            except Exception as e:
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –≤–∏–¥–µ–æ: {e}")
        await state.clear()
    else:
        await progress_msg.edit_text("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É.")
        async with async_session_maker() as session:
            user = await session.exec(
                select(User).where(User.telegram_id == message.from_user.id)
            )
            me = user.first()
            if me.flag:
                me.coins += 1
            else:
                me.diamonds += 1
            session.add(me)
            await session.commit()


@router.message(SearchState.waiting_for_query)
async def handle_trend_query(message: Message, state: FSMContext):
    await run_query(message, message.text, state)
